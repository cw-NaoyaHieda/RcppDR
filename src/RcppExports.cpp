// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rnorm_cpp
NumericVector rnorm_cpp(const int N, double mean, double sd);
RcppExport SEXP RcppDR_rnorm_cpp(SEXP NSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rnorm_cpp(N, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_cpp
NumericVector dnorm_cpp(std::vector<double> Q, double mean, double sd);
RcppExport SEXP RcppDR_dnorm_cpp(SEXP QSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp(Q, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// g_DR_cpp
NumericVector g_DR_cpp(std::vector<double> dr, std::vector<double> pd, std::vector<double> RHO);
RcppExport SEXP RcppDR_g_DR_cpp(SEXP drSEXP, SEXP pdSEXP, SEXP RHOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type dr(drSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type pd(pdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type RHO(RHOSEXP);
    rcpp_result_gen = Rcpp::wrap(g_DR_cpp(dr, pd, RHO));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_rcpp
NumericMatrix rmvnorm_rcpp(int N, NumericVector mean, NumericVector sigma);
RcppExport SEXP RcppDR_rmvnorm_rcpp(SEXP NSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_rcpp(N, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_rcpp
double dmvnorm_rcpp(NumericVector x, NumericVector mean, NumericVector sigma);
RcppExport SEXP RcppDR_dmvnorm_rcpp(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_rcpp(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// tmp
double tmp(double x);
RcppExport SEXP RcppDR_tmp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tmp(x));
    return rcpp_result_gen;
END_RCPP
}
// vector_f_sum
NumericVector vector_f_sum(List input, Function f);
RcppExport SEXP RcppDR_vector_f_sum(SEXP inputSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_f_sum(input, f));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"RcppDR_rnorm_cpp", (DL_FUNC) &RcppDR_rnorm_cpp, 3},
    {"RcppDR_dnorm_cpp", (DL_FUNC) &RcppDR_dnorm_cpp, 3},
    {"RcppDR_g_DR_cpp", (DL_FUNC) &RcppDR_g_DR_cpp, 3},
    {"RcppDR_rmvnorm_rcpp", (DL_FUNC) &RcppDR_rmvnorm_rcpp, 3},
    {"RcppDR_dmvnorm_rcpp", (DL_FUNC) &RcppDR_dmvnorm_rcpp, 3},
    {"RcppDR_tmp", (DL_FUNC) &RcppDR_tmp, 1},
    {"RcppDR_vector_f_sum", (DL_FUNC) &RcppDR_vector_f_sum, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppDR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
